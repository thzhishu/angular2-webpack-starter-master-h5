/**
 * 问卷系统 API
 * 前后端交互协议, 遵循以下约定:   1. 所有api都属于无状态接口   2. 除了/user/login,/_*_/sms,/user/register,/user/updatePwd接口，其他接口都要登录之后才能操作   3. 登录成功之后，后端每次都把token和shopId(当前门店)置入header,回传服务端   4. 客户端请求参数分两种:       1. 以form方式提交，可以附带store、pageNumber、pageSize参数       2. 以json方式提交，务必附带store、pageNumber、pageSize属性，如果没有值，为null   5. 服务端返回统一的json， 格式如下:       {        meta:{         code: 状态码         link: 链接         limit: 每页多少条         total:  总共多少条         current: 当前页         method: 方法         parameters: {  客户端的请求参数          startDate:开始时间          endDate:结束时间          ........:xxxx(请求参数都会在meta里面)                    },         store: { 客户端专用，保存交互状态的对象                  }         }        data:{ // 保存的数据，可能是array, object          object          list<object>          jsonArray        }        error:{           code:xxxxx (子状态码)            message:xxxxx        }       }            6. 公共状态(meta->code)约定如下:              500:             服务端处理失败， 返回json中存在error, meta对象， 不一定存在data对象          200:             成功， 返回json中有meta， data对象， 不存在error对象          401:             认证失败，用户的token过期或者token错误， 客户端需要引导用户重新登录          403:             授权失败， 一般出现在用户访问没有权限的资源, 返回json中存在error, meta对象          400:             参数错误,  客户端提交的参数不正确, 返回json中存在error, meta对象                 7. error的子状态码， 开发人员可以自行约定              
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DefaultApi {
    protected basePath = 'http://survey.mytianhui.com/api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 删除分类
     * 删除问题分类 
     * @param categoryId 分类id
     */
    public categoriesCategoryIdDeleteDelete(categoryId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.categoriesCategoryIdDeleteDeleteWithHttpInfo(categoryId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据分类获取分页，分页带有问题
     * 根据分类获取分页，分页带有问题 
     * @param categoryId 分类id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public categoriesCategoryIdPagesPost(categoryId: string, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<models.PageListResponse> {
        return this.categoriesCategoryIdPagesPostWithHttpInfo(categoryId, pageNumber, pageSize, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 根据分类获取问题
     * 根据分类获取问题 
     * @param categoryId 分类id
     */
    public categoriesCategoryIdQuestionsGet(categoryId: string, extraHttpRequestParams?: any): Observable<models.QuestionListResponse> {
        return this.categoriesCategoryIdQuestionsGetWithHttpInfo(categoryId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更改分类
     * 更改分类 
     * @param categoryId 分类id
     * @param name 新分类名
     * @param concept 概念名
     * @param required 是否必须, 0否， 1是
     * @param timeLimit 限时, seconds
     */
    public categoriesCategoryIdUpdatePut(categoryId: number, name?: string, concept?: string, required?: string, timeLimit?: number, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.categoriesCategoryIdUpdatePutWithHttpInfo(categoryId, name, concept, required, timeLimit, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除问题分类
     * 删除问题分类 
     * @param categoryIds 合并的分类id, 多个就用都好分隔
     * @param name 新分类名
     */
    public categoriesMergePost(categoryIds?: string, name?: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.categoriesMergePostWithHttpInfo(categoryIds, name, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 共用上传文件接口
     * 共用上传文件接口 
     * @param file 文件，multipart/form-data
     * @param category 文件分类, theme背景图片, surveys答题时候上传图片、视频等
     */
    public commonnAttachmentsUploadPost(file: any, category: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.commonnAttachmentsUploadPostWithHttpInfo(file, category, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 设置标记
     * 设置逻辑 
     * @param checkStatus 是否选中  checked 选中 unchecked 不选中
     * @param payload 要选中的问题
     */
    public logicsCheckStatusPost(checkStatus: string, payload: models.QuestionIdList, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.logicsCheckStatusPostWithHttpInfo(checkStatus, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取问卷的逻辑列表
     * 设置逻辑 
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param status 1 显示所有， 2显示勾选， 默认显示所有
     * @param code 题号
     */
    public logicsGet(surveyId: string, pageNumber?: number, pageSize?: number, status?: number, code?: string, extraHttpRequestParams?: any): Observable<models.LogicQuestionResponse> {
        return this.logicsGetWithHttpInfo(surveyId, pageNumber, pageSize, status, code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除逻辑
     * 删除逻辑 
     * @param logicId 逻辑id
     */
    public logicsLogicIdDeleteDelete(logicId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.logicsLogicIdDeleteDeleteWithHttpInfo(logicId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除某个问题下所有逻辑
     * 删除逻辑 
     * @param questionId 问题id
     */
    public logicsQuestionIdDeleteAllDelete(questionId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.logicsQuestionIdDeleteAllDeleteWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 设置逻辑, 前端要维护logics, 后台做更新或者插入, method PUT. 多行就是多逻辑
     * 设置逻辑 
     * @param logicId 逻辑id
     * @param questionId 问题id
     * @param optionId 选项id
     * @param expression 逻辑表达式,多表达式就多行
     */
    public logicsSavePut(logicId?: string, questionId?: string, optionId?: string, expression?: string, extraHttpRequestParams?: any): Observable<models.LogicResponse> {
        return this.logicsSavePutWithHttpInfo(logicId, questionId, optionId, expression, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 设置遇到终止逻辑后，继续答题标记。 答题的逻辑RS来负责
     * 设置遇到终止逻辑后，继续答题标记 
     * @param questionId 要选中的问题
     * @param terminate 终止标识
     */
    public logicsTerminateContinuePost(questionId: string, terminate: number, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.logicsTerminateContinuePostWithHttpInfo(questionId, terminate, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取用户下所有项目 
     * 
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public projectsGet(pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<models.ProjectResponse> {
        return this.projectsGetWithHttpInfo(pageNumber, pageSize, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 查询项目 
     * 
     * @param projectId 项目id
     */
    public projectsProjectIdGet(projectId: number, extraHttpRequestParams?: any): Observable<models.OneProjectResponse> {
        return this.projectsProjectIdGetWithHttpInfo(projectId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 项目上线、下线 
     * 
     * @param projectId 项目id
     * @param status active上线, deactive 下线
     */
    public projectsProjectIdStatusPost(projectId: number, status: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.projectsProjectIdStatusPostWithHttpInfo(projectId, status, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取项目下的问卷 
     * 
     * @param projectId 分页大小
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public projectsProjectIdSurveysGet(projectId: number, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<models.SurveyListResponse> {
        return this.projectsProjectIdSurveysGetWithHttpInfo(projectId, pageNumber, pageSize, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 加载问卷，第一次加载问卷设置信息和第一页题目  问卷完整预览或从特定题目预览            1. 客户端从服务器获取样本的设置信息   2. 客户端显示欢迎页   3. 客户端显示第一页数据   4. 客户端提交样本， 调用/surveys/{shortUrl}/submit 
     * 
     * @param shortUrl 问卷的url
     * @param surveyToken 如果浏览器意外关掉， 用户可以重新答题的标记。第一次服务端返回
     */
    public publicSurveysShortUrlGet(shortUrl: string, surveyToken?: string, extraHttpRequestParams?: any): Observable<models.SurveyResponse> {
        return this.publicSurveysShortUrlGetWithHttpInfo(shortUrl, surveyToken, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 按页保存样本 1. 提交样本, 如果第一次提交返回sampleId, 以后前端都要回传sampleId 2. 服务端保存样本数据，调用逻辑，返回下一页问题 3. 重复1-2, 一直到问题data的结果为空 4. 客户端显示结束页 
     * 
     * @param surveyToken 答题凭证
     * @param shortUrl 问卷url
     * @param payload 答案的array json
     */
    public publicSurveysShortUrlSubmitPost(surveyToken: string, shortUrl: string, payload: models.SampleRequest, extraHttpRequestParams?: any): Observable<models.QuestionResponse> {
        return this.publicSurveysShortUrlSubmitPostWithHttpInfo(surveyToken, shortUrl, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更改分页， RS默认一页一道题, 并且分页是不能跨越问题分类
     * 分类内问题分页 
     * @param payload 排序之后的问题id数组, 分页数组,  [[q1, q2, q3], [q4, q5], [q6]]
     */
    public questionsPagingUpdatePut(payload: models.PageList, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.questionsPagingUpdatePutWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 复制问题
     * 复制问题 
     * @param questionId 问题id
     */
    public questionsQuestionIdCopyGet(questionId: string, extraHttpRequestParams?: any): Observable<models.AwareUUIDResponse> {
        return this.questionsQuestionIdCopyGetWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除问题
     * 删除问题 
     * @param questionId 问题id
     */
    public questionsQuestionIdDeleteDelete(questionId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.questionsQuestionIdDeleteDeleteWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取问题详情
     * 获取问题详情 
     * @param questionId 问题id
     */
    public questionsQuestionIdGet(questionId: string, extraHttpRequestParams?: any): Observable<models.QuestionDetailResponse> {
        return this.questionsQuestionIdGetWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 逻辑编辑, 包括父问题，子问题、选项逻辑
     * 逻辑编辑 
     * @param questionId 问题id
     */
    public questionsQuestionIdLogicsGet(questionId: string, extraHttpRequestParams?: any): Observable<models.SimpleQuestionListResponse> {
        return this.questionsQuestionIdLogicsGetWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 1. 问题预览，预览后台都从cache取 
     * 
     * @param questionId 问题id
     */
    public questionsQuestionIdPreviewGet(questionId: string, extraHttpRequestParams?: any): Observable<models.QuestionResponse> {
        return this.questionsQuestionIdPreviewGetWithHttpInfo(questionId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更新问题, method PUT
     * 更新问题 
     * @param questionId 问题id
     * @param payload json格式， 问卷基本信息设置
     */
    public questionsQuestionIdUpdatePut(questionId: string, payload: models.QuestionDetail, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.questionsQuestionIdUpdatePutWithHttpInfo(questionId, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 分类随机和问题随机， 如果有分页，分页也可以随机。 考虑使用collections.shuffle
     * 分类随机和问题随机 
     * @param payload 洗牌
     */
    public questionsShufflePost(payload: models.Shuffle, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.questionsShufflePostWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 问题排序, 任意排序之后，保存排序
     * 问题排序 
     * @param payload 排序之后的问题id数组
     */
    public questionsSortPost(payload: models.QuestionIdList, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.questionsSortPostWithHttpInfo(payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 创建问卷
     * 创建问卷     
     * @param code 问卷编号
     * @param name 问卷名称
     * @param alias 外部名称
     * @param entityId 项目id，前端从旧智数门店获取
     */
    public surveysCreatePost(code?: string, name?: string, alias?: string, entityId?: number, extraHttpRequestParams?: any): Observable<models.AwareUUIDResponse> {
        return this.surveysCreatePostWithHttpInfo(code, name, alias, entityId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 项目问卷列表，问卷搜索排序
     * 项目问卷列表， 后端需要在旧智数生成一个token，保存到cache, 
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param entityId 项目id, 从旧智数系统传递给前端
     * @param name 问卷名称
     * @param sort -降序+升序，-name,+updated,-responseNum 
     * @param token 旧智数系统和新问卷系统的登录凭证
     */
    public surveysGet(pageNumber?: number, pageSize?: number, entityId?: number, name?: string, sort?: string, token?: string, extraHttpRequestParams?: any): Observable<models.SurveyListResponse> {
        return this.surveysGetWithHttpInfo(pageNumber, pageSize, entityId, name, sort, token, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 问卷完整预览或从特定题目预览           1. 客户端从服务器获取样本的设置信息  2. 客户端显示欢迎页  3. 客户端显示第一页数据  4. 客户端提交样本， 调用/surveys/{shortUrl}/preview/submit 
     * 
     * @param shortUrl 问卷url
     * @param surveyToken 如果浏览器意外关掉， 用户可以重新答题的标记。第一次服务端返回
     * @param from 开始预览的题目id
     */
    public surveysShortUrlPreviewGet(shortUrl: string, surveyToken?: string, from?: string, extraHttpRequestParams?: any): Observable<models.SurveyResponse> {
        return this.surveysShortUrlPreviewGetWithHttpInfo(shortUrl, surveyToken, from, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 按页在内存在保存样本 1. 提交样本, 如果第一次提交返回sampleId, 以后前端都要回传sampleId 2. 客户端按页提交样本 3. 服务端临时保存样本数据，调用逻辑，返回下一页问题 4. 重复1-2, 一直到问题data的结果为空 5. 客户端显示结束页 
     * 
     * @param surveyToken 答题凭证
     * @param shortUrl 问卷url
     * @param payload 答案的array json
     */
    public surveysShortUrlPreviewSubmitPost(surveyToken: string, shortUrl: string, payload: models.SampleRequest, extraHttpRequestParams?: any): Observable<models.QuestionResponse> {
        return this.surveysShortUrlPreviewSubmitPostWithHttpInfo(surveyToken, shortUrl, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 创建问题分类  
     * 
     * @param surveyId 问卷的id
     * @param categories 分类名称， 一行一个
     */
    public surveysSurveyIdCategoriesCreatePost(surveyId: string, categories: string, extraHttpRequestParams?: any): Observable<models.AwareIDResponse> {
        return this.surveysSurveyIdCategoriesCreatePostWithHttpInfo(surveyId, categories, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 所有问题分类   
     * 
     * @param surveyId 问卷的id
     */
    public surveysSurveyIdCategoriesGet(surveyId: string, extraHttpRequestParams?: any): Observable<models.CategoryListResponse> {
        return this.surveysSurveyIdCategoriesGetWithHttpInfo(surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 复制问卷
     * 复制问卷     
     * @param surveyId 问卷id
     * @param alias 外部名称
     * @param code 问卷编号
     * @param name 内部名称
     * @param entityId 项目id，前端从旧智数门店获取
     */
    public surveysSurveyIdCopyPost(surveyId: string, alias: string, code?: string, name?: string, entityId?: number, extraHttpRequestParams?: any): Observable<models.AwareUUIDResponse> {
        return this.surveysSurveyIdCopyPostWithHttpInfo(surveyId, alias, code, name, entityId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 删除问卷
     * 问卷模板下载 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdDeleteDelete(surveyId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysSurveyIdDeleteDeleteWithHttpInfo(surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取问卷基本信息
     * 问卷设定-&gt;基本信息或者问卷编辑 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdGet(surveyId: string, extraHttpRequestParams?: any): Observable<models.SurveyDetailResponse> {
        return this.surveysSurveyIdGetWithHttpInfo(surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 下载逻辑表达式
     * 问卷模板下载 
     * @param surveyId 问卷id
     * @param ext 模板格式,默认txt, 比如/surveys/111/efx.txt
     */
    public surveysSurveyIdLogicExpsExtGet(surveyId: string, ext: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.surveysSurveyIdLogicExpsExtGetWithHttpInfo(surveyId, ext, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取问题、选项基本信息和逻辑
     * 逻辑导入与导出界面的逻辑列表 
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public surveysSurveyIdLogicsGet(surveyId: string, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<models.SimpleQuestionListResponse> {
        return this.surveysSurveyIdLogicsGetWithHttpInfo(surveyId, pageNumber, pageSize, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 特定问卷逻辑上传
     * 问卷逻辑上传 
     * @param file 问卷逻辑上传
     * @param append 1追加，2 覆盖
     * @param surveyId 问卷id
     */
    public surveysSurveyIdLogicsUploadGet(file: any, append: any, surveyId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysSurveyIdLogicsUploadGetWithHttpInfo(file, append, surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 问卷欢迎结束页/访问设置/系统主题等, 注意这里是PUT不是POST
     * 更新问卷preference， 为了方便扩展，做成字典格式 
     * @param surveyId 问卷id
     * @param payload json格式， 设置某个问卷的偏好
     */
    public surveysSurveyIdPreferencePut(surveyId: string, payload: Array<models.Preference>, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysSurveyIdPreferencePutWithHttpInfo(surveyId, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 创建问题
     * 问卷问题列表   
     * @param surveyId 问卷id
     * @param payload json格式， 问卷基本信息设置
     */
    public surveysSurveyIdQuestionsCreatePost(surveyId: string, payload: models.QuestionDetail, extraHttpRequestParams?: any): Observable<models.AwareUUIDResponse> {
        return this.surveysSurveyIdQuestionsCreatePostWithHttpInfo(surveyId, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 问卷问题列表,搜索
     * 问卷问题列表   
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param code 问题编号 查询
     * @param categoryId 问题分类 查询
     */
    public surveysSurveyIdQuestionsGet(surveyId: string, pageNumber?: number, pageSize?: number, code?: string, categoryId?: number, extraHttpRequestParams?: any): Observable<models.QuestionListResponse> {
        return this.surveysSurveyIdQuestionsGetWithHttpInfo(surveyId, pageNumber, pageSize, code, categoryId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取welcomePage 欢迎页， endPage 结束页，theme 主题等内容 
     * 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdSurveyPreferenceGet(surveyId: string, extraHttpRequestParams?: any): Observable<models.SurveyPreference> {
        return this.surveysSurveyIdSurveyPreferenceGetWithHttpInfo(surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 特定问卷模板下载
     * 问卷模板下载 
     * @param surveyId 问卷id
     * @param ext 模板格式,默认xlsx, 比如/surveys/efx.xlsx
     */
    public surveysSurveyIdTemplateExtGet(surveyId: string, ext: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.surveysSurveyIdTemplateExtGetWithHttpInfo(surveyId, ext, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 特定问卷模板上传
     * 问卷模板下载 
     * @param file 特定分卷模板上传
     * @param surveyId 问卷id
     */
    public surveysSurveyIdTemplateUploadGet(file: any, surveyId: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysSurveyIdTemplateUploadGetWithHttpInfo(file, surveyId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 更新问卷基本信息, 注意这里是PUT不是POST
     * 更新问卷基本信息 
     * @param surveyId 问卷id
     * @param payload json格式， 问卷基本信息设置
     */
    public surveysSurveyIdUpdatePut(surveyId: string, payload: models.SurveyDetail, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysSurveyIdUpdatePutWithHttpInfo(surveyId, payload, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 共用问卷模板下载
     * 问卷模板下载 
     * @param ext 模板格式,默认xlsx, 比如/surveys/efx.xlsx
     */
    public surveysTemplateExtGet(ext: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.surveysTemplateExtGetWithHttpInfo(ext, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 共用问卷模板上传
     * 问卷模板下载 
     * @param file 模板文件，multipart/form-data
     */
    public surveysTemplateUploadPost(file: any, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.surveysTemplateUploadPostWithHttpInfo(file, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 删除分类
     * 删除问题分类 
     * @param categoryId 分类id
     */
    public categoriesCategoryIdDeleteDeleteWithHttpInfo(categoryId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/categories/${categoryId}/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling categoriesCategoryIdDeleteDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 根据分类获取分页，分页带有问题
     * 根据分类获取分页，分页带有问题 
     * @param categoryId 分类id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public categoriesCategoryIdPagesPostWithHttpInfo(categoryId: string, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/categories/${categoryId}/pages`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling categoriesCategoryIdPagesPost.');
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 根据分类获取问题
     * 根据分类获取问题 
     * @param categoryId 分类id
     */
    public categoriesCategoryIdQuestionsGetWithHttpInfo(categoryId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/categories/${categoryId}/questions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling categoriesCategoryIdQuestionsGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 更改分类
     * 更改分类 
     * @param categoryId 分类id
     * @param name 新分类名
     * @param concept 概念名
     * @param required 是否必须, 0否， 1是
     * @param timeLimit 限时, seconds
     */
    public categoriesCategoryIdUpdatePutWithHttpInfo(categoryId: number, name?: string, concept?: string, required?: string, timeLimit?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/categories/${categoryId}/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'categoryId' is not null or undefined
        if (categoryId === null || categoryId === undefined) {
            throw new Error('Required parameter categoryId was null or undefined when calling categoriesCategoryIdUpdatePut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (name !== undefined) {
            formParams.set('name', <any>name); 
        }
        if (concept !== undefined) {
            formParams.set('concept', <any>concept); 
        }
        if (required !== undefined) {
            formParams.set('required', <any>required); 
        }
        if (timeLimit !== undefined) {
            formParams.set('timeLimit', <any>timeLimit); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 删除问题分类
     * 删除问题分类 
     * @param categoryIds 合并的分类id, 多个就用都好分隔
     * @param name 新分类名
     */
    public categoriesMergePostWithHttpInfo(categoryIds?: string, name?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/categories/merge`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();



        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (categoryIds !== undefined) {
            formParams.set('categoryIds', <any>categoryIds); 
        }
        if (name !== undefined) {
            formParams.set('name', <any>name); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 共用上传文件接口
     * 共用上传文件接口 
     * @param file 文件，multipart/form-data
     * @param category 文件分类, theme背景图片, surveys答题时候上传图片、视频等
     */
    public commonnAttachmentsUploadPostWithHttpInfo(file: any, category: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/commonn/attachments/upload`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling commonnAttachmentsUploadPost.');
        }
        // verify required parameter 'category' is not null or undefined
        if (category === null || category === undefined) {
            throw new Error('Required parameter category was null or undefined when calling commonnAttachmentsUploadPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (file !== undefined) {
            formParams.set('file', <any>file); 
        }
        if (category !== undefined) {
            formParams.set('category', <any>category); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 设置标记
     * 设置逻辑 
     * @param checkStatus 是否选中  checked 选中 unchecked 不选中
     * @param payload 要选中的问题
     */
    public logicsCheckStatusPostWithHttpInfo(checkStatus: string, payload: models.QuestionIdList, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics/${checkStatus}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'checkStatus' is not null or undefined
        if (checkStatus === null || checkStatus === undefined) {
            throw new Error('Required parameter checkStatus was null or undefined when calling logicsCheckStatusPost.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling logicsCheckStatusPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取问卷的逻辑列表
     * 设置逻辑 
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param status 1 显示所有， 2显示勾选， 默认显示所有
     * @param code 题号
     */
    public logicsGetWithHttpInfo(surveyId: string, pageNumber?: number, pageSize?: number, status?: number, code?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling logicsGet.');
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (surveyId !== undefined) {
            queryParameters.set('surveyId', <any>surveyId);
        }
        if (status !== undefined) {
            queryParameters.set('status', <any>status);
        }
        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 删除逻辑
     * 删除逻辑 
     * @param logicId 逻辑id
     */
    public logicsLogicIdDeleteDeleteWithHttpInfo(logicId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics/${logicId}/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'logicId' is not null or undefined
        if (logicId === null || logicId === undefined) {
            throw new Error('Required parameter logicId was null or undefined when calling logicsLogicIdDeleteDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 删除某个问题下所有逻辑
     * 删除逻辑 
     * @param questionId 问题id
     */
    public logicsQuestionIdDeleteAllDeleteWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics/${questionId}/deleteAll`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling logicsQuestionIdDeleteAllDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 设置逻辑, 前端要维护logics, 后台做更新或者插入, method PUT. 多行就是多逻辑
     * 设置逻辑 
     * @param logicId 逻辑id
     * @param questionId 问题id
     * @param optionId 选项id
     * @param expression 逻辑表达式,多表达式就多行
     */
    public logicsSavePutWithHttpInfo(logicId?: string, questionId?: string, optionId?: string, expression?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics/save`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();



        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (logicId !== undefined) {
            formParams.set('logicId', <any>logicId); 
        }
        if (questionId !== undefined) {
            formParams.set('questionId', <any>questionId); 
        }
        if (optionId !== undefined) {
            formParams.set('optionId', <any>optionId); 
        }
        if (expression !== undefined) {
            formParams.set('expression', <any>expression); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 设置遇到终止逻辑后，继续答题标记。 答题的逻辑RS来负责
     * 设置遇到终止逻辑后，继续答题标记 
     * @param questionId 要选中的问题
     * @param terminate 终止标识
     */
    public logicsTerminateContinuePostWithHttpInfo(questionId: string, terminate: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/logics/terminateContinue/`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling logicsTerminateContinuePost.');
        }
        // verify required parameter 'terminate' is not null or undefined
        if (terminate === null || terminate === undefined) {
            throw new Error('Required parameter terminate was null or undefined when calling logicsTerminateContinuePost.');
        }
        if (questionId !== undefined) {
            queryParameters.set('questionId', <any>questionId);
        }
        if (terminate !== undefined) {
            queryParameters.set('terminate', <any>terminate);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取用户下所有项目 
     * 
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public projectsGetWithHttpInfo(pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/projects`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 查询项目 
     * 
     * @param projectId 项目id
     */
    public projectsProjectIdGetWithHttpInfo(projectId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/projects/${projectId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 项目上线、下线 
     * 
     * @param projectId 项目id
     * @param status active上线, deactive 下线
     */
    public projectsProjectIdStatusPostWithHttpInfo(projectId: number, status: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/projects/${projectId}/${status}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdStatusPost.');
        }
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling projectsProjectIdStatusPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取项目下的问卷 
     * 
     * @param projectId 分页大小
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public projectsProjectIdSurveysGetWithHttpInfo(projectId: number, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/projects/${projectId}/surveys`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling projectsProjectIdSurveysGet.');
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 加载问卷，第一次加载问卷设置信息和第一页题目  问卷完整预览或从特定题目预览            1. 客户端从服务器获取样本的设置信息   2. 客户端显示欢迎页   3. 客户端显示第一页数据   4. 客户端提交样本， 调用/surveys/{shortUrl}/submit 
     * 
     * @param shortUrl 问卷的url
     * @param surveyToken 如果浏览器意外关掉， 用户可以重新答题的标记。第一次服务端返回
     */
    public publicSurveysShortUrlGetWithHttpInfo(shortUrl: string, surveyToken?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/public/surveys/${shortUrl}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'shortUrl' is not null or undefined
        if (shortUrl === null || shortUrl === undefined) {
            throw new Error('Required parameter shortUrl was null or undefined when calling publicSurveysShortUrlGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 按页保存样本 1. 提交样本, 如果第一次提交返回sampleId, 以后前端都要回传sampleId 2. 服务端保存样本数据，调用逻辑，返回下一页问题 3. 重复1-2, 一直到问题data的结果为空 4. 客户端显示结束页 
     * 
     * @param surveyToken 答题凭证
     * @param shortUrl 问卷url
     * @param payload 答案的array json
     */
    public publicSurveysShortUrlSubmitPostWithHttpInfo(surveyToken: string, shortUrl: string, payload: models.SampleRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/public/surveys/${shortUrl}/submit`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyToken' is not null or undefined
        if (surveyToken === null || surveyToken === undefined) {
            throw new Error('Required parameter surveyToken was null or undefined when calling publicSurveysShortUrlSubmitPost.');
        }
        // verify required parameter 'shortUrl' is not null or undefined
        if (shortUrl === null || shortUrl === undefined) {
            throw new Error('Required parameter shortUrl was null or undefined when calling publicSurveysShortUrlSubmitPost.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling publicSurveysShortUrlSubmitPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 更改分页， RS默认一页一道题, 并且分页是不能跨越问题分类
     * 分类内问题分页 
     * @param payload 排序之后的问题id数组, 分页数组,  [[q1, q2, q3], [q4, q5], [q6]]
     */
    public questionsPagingUpdatePutWithHttpInfo(payload: models.PageList, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/paging/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling questionsPagingUpdatePut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 复制问题
     * 复制问题 
     * @param questionId 问题id
     */
    public questionsQuestionIdCopyGetWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}/copy`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdCopyGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 删除问题
     * 删除问题 
     * @param questionId 问题id
     */
    public questionsQuestionIdDeleteDeleteWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdDeleteDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取问题详情
     * 获取问题详情 
     * @param questionId 问题id
     */
    public questionsQuestionIdGetWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 逻辑编辑, 包括父问题，子问题、选项逻辑
     * 逻辑编辑 
     * @param questionId 问题id
     */
    public questionsQuestionIdLogicsGetWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}/logics`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdLogicsGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 1. 问题预览，预览后台都从cache取 
     * 
     * @param questionId 问题id
     */
    public questionsQuestionIdPreviewGetWithHttpInfo(questionId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}/preview`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdPreviewGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 更新问题, method PUT
     * 更新问题 
     * @param questionId 问题id
     * @param payload json格式， 问卷基本信息设置
     */
    public questionsQuestionIdUpdatePutWithHttpInfo(questionId: string, payload: models.QuestionDetail, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/${questionId}/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'questionId' is not null or undefined
        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling questionsQuestionIdUpdatePut.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling questionsQuestionIdUpdatePut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 分类随机和问题随机， 如果有分页，分页也可以随机。 考虑使用collections.shuffle
     * 分类随机和问题随机 
     * @param payload 洗牌
     */
    public questionsShufflePostWithHttpInfo(payload: models.Shuffle, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/shuffle`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling questionsShufflePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 问题排序, 任意排序之后，保存排序
     * 问题排序 
     * @param payload 排序之后的问题id数组
     */
    public questionsSortPostWithHttpInfo(payload: models.QuestionIdList, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/questions/sort`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling questionsSortPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 创建问卷
     * 创建问卷     
     * @param code 问卷编号
     * @param name 问卷名称
     * @param alias 外部名称
     * @param entityId 项目id，前端从旧智数门店获取
     */
    public surveysCreatePostWithHttpInfo(code?: string, name?: string, alias?: string, entityId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/create`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();



        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (code !== undefined) {
            formParams.set('code', <any>code); 
        }
        if (name !== undefined) {
            formParams.set('name', <any>name); 
        }
        if (alias !== undefined) {
            formParams.set('alias', <any>alias); 
        }
        if (entityId !== undefined) {
            formParams.set('entityId', <any>entityId); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 项目问卷列表，问卷搜索排序
     * 项目问卷列表， 后端需要在旧智数生成一个token，保存到cache, 
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param entityId 项目id, 从旧智数系统传递给前端
     * @param name 问卷名称
     * @param sort -降序+升序，-name,+updated,-responseNum 
     * @param token 旧智数系统和新问卷系统的登录凭证
     */
    public surveysGetWithHttpInfo(pageNumber?: number, pageSize?: number, entityId?: number, name?: string, sort?: string, token?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (entityId !== undefined) {
            queryParameters.set('entityId', <any>entityId);
        }
        if (name !== undefined) {
            queryParameters.set('name', <any>name);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }
        if (token !== undefined) {
            queryParameters.set('token', <any>token);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 问卷完整预览或从特定题目预览           1. 客户端从服务器获取样本的设置信息  2. 客户端显示欢迎页  3. 客户端显示第一页数据  4. 客户端提交样本， 调用/surveys/{shortUrl}/preview/submit 
     * 
     * @param shortUrl 问卷url
     * @param surveyToken 如果浏览器意外关掉， 用户可以重新答题的标记。第一次服务端返回
     * @param from 开始预览的题目id
     */
    public surveysShortUrlPreviewGetWithHttpInfo(shortUrl: string, surveyToken?: string, from?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${shortUrl}/preview`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'shortUrl' is not null or undefined
        if (shortUrl === null || shortUrl === undefined) {
            throw new Error('Required parameter shortUrl was null or undefined when calling surveysShortUrlPreviewGet.');
        }
        if (from !== undefined) {
            queryParameters.set('from', <any>from);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 按页在内存在保存样本 1. 提交样本, 如果第一次提交返回sampleId, 以后前端都要回传sampleId 2. 客户端按页提交样本 3. 服务端临时保存样本数据，调用逻辑，返回下一页问题 4. 重复1-2, 一直到问题data的结果为空 5. 客户端显示结束页 
     * 
     * @param surveyToken 答题凭证
     * @param shortUrl 问卷url
     * @param payload 答案的array json
     */
    public surveysShortUrlPreviewSubmitPostWithHttpInfo(surveyToken: string, shortUrl: string, payload: models.SampleRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${shortUrl}/preview/submit`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyToken' is not null or undefined
        if (surveyToken === null || surveyToken === undefined) {
            throw new Error('Required parameter surveyToken was null or undefined when calling surveysShortUrlPreviewSubmitPost.');
        }
        // verify required parameter 'shortUrl' is not null or undefined
        if (shortUrl === null || shortUrl === undefined) {
            throw new Error('Required parameter shortUrl was null or undefined when calling surveysShortUrlPreviewSubmitPost.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling surveysShortUrlPreviewSubmitPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 创建问题分类  
     * 
     * @param surveyId 问卷的id
     * @param categories 分类名称， 一行一个
     */
    public surveysSurveyIdCategoriesCreatePostWithHttpInfo(surveyId: string, categories: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/categories/create`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdCategoriesCreatePost.');
        }
        // verify required parameter 'categories' is not null or undefined
        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling surveysSurveyIdCategoriesCreatePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (categories !== undefined) {
            formParams.set('categories', <any>categories); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 所有问题分类   
     * 
     * @param surveyId 问卷的id
     */
    public surveysSurveyIdCategoriesGetWithHttpInfo(surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/categories`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdCategoriesGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 复制问卷
     * 复制问卷     
     * @param surveyId 问卷id
     * @param alias 外部名称
     * @param code 问卷编号
     * @param name 内部名称
     * @param entityId 项目id，前端从旧智数门店获取
     */
    public surveysSurveyIdCopyPostWithHttpInfo(surveyId: string, alias: string, code?: string, name?: string, entityId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/copy`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdCopyPost.');
        }
        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling surveysSurveyIdCopyPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (code !== undefined) {
            formParams.set('code', <any>code); 
        }
        if (name !== undefined) {
            formParams.set('name', <any>name); 
        }
        if (alias !== undefined) {
            formParams.set('alias', <any>alias); 
        }
        if (entityId !== undefined) {
            formParams.set('entityId', <any>entityId); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 删除问卷
     * 问卷模板下载 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdDeleteDeleteWithHttpInfo(surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/delete`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdDeleteDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取问卷基本信息
     * 问卷设定-&gt;基本信息或者问卷编辑 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdGetWithHttpInfo(surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 下载逻辑表达式
     * 问卷模板下载 
     * @param surveyId 问卷id
     * @param ext 模板格式,默认txt, 比如/surveys/111/efx.txt
     */
    public surveysSurveyIdLogicExpsExtGetWithHttpInfo(surveyId: string, ext: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/logicExps.${ext}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdLogicExpsExtGet.');
        }
        // verify required parameter 'ext' is not null or undefined
        if (ext === null || ext === undefined) {
            throw new Error('Required parameter ext was null or undefined when calling surveysSurveyIdLogicExpsExtGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取问题、选项基本信息和逻辑
     * 逻辑导入与导出界面的逻辑列表 
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     */
    public surveysSurveyIdLogicsGetWithHttpInfo(surveyId: string, pageNumber?: number, pageSize?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/logics`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdLogicsGet.');
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 特定问卷逻辑上传
     * 问卷逻辑上传 
     * @param file 问卷逻辑上传
     * @param append 1追加，2 覆盖
     * @param surveyId 问卷id
     */
    public surveysSurveyIdLogicsUploadGetWithHttpInfo(file: any, append: any, surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/logics/upload`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling surveysSurveyIdLogicsUploadGet.');
        }
        // verify required parameter 'append' is not null or undefined
        if (append === null || append === undefined) {
            throw new Error('Required parameter append was null or undefined when calling surveysSurveyIdLogicsUploadGet.');
        }
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdLogicsUploadGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (file !== undefined) {
            formParams.set('file', <any>file); 
        }
        if (append !== undefined) {
            formParams.set('append', <any>append); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 问卷欢迎结束页/访问设置/系统主题等, 注意这里是PUT不是POST
     * 更新问卷preference， 为了方便扩展，做成字典格式 
     * @param surveyId 问卷id
     * @param payload json格式， 设置某个问卷的偏好
     */
    public surveysSurveyIdPreferencePutWithHttpInfo(surveyId: string, payload: Array<models.Preference>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/preference`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdPreferencePut.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling surveysSurveyIdPreferencePut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 创建问题
     * 问卷问题列表   
     * @param surveyId 问卷id
     * @param payload json格式， 问卷基本信息设置
     */
    public surveysSurveyIdQuestionsCreatePostWithHttpInfo(surveyId: string, payload: models.QuestionDetail, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/questions/create`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdQuestionsCreatePost.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling surveysSurveyIdQuestionsCreatePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 问卷问题列表,搜索
     * 问卷问题列表   
     * @param surveyId 问卷id
     * @param pageNumber 当前页
     * @param pageSize 分页大小
     * @param code 问题编号 查询
     * @param categoryId 问题分类 查询
     */
    public surveysSurveyIdQuestionsGetWithHttpInfo(surveyId: string, pageNumber?: number, pageSize?: number, code?: string, categoryId?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/questions`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdQuestionsGet.');
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }
        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }
        if (categoryId !== undefined) {
            queryParameters.set('categoryId', <any>categoryId);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取welcomePage 欢迎页， endPage 结束页，theme 主题等内容 
     * 
     * @param surveyId 问卷id
     */
    public surveysSurveyIdSurveyPreferenceGetWithHttpInfo(surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/surveyPreference`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdSurveyPreferenceGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 特定问卷模板下载
     * 问卷模板下载 
     * @param surveyId 问卷id
     * @param ext 模板格式,默认xlsx, 比如/surveys/efx.xlsx
     */
    public surveysSurveyIdTemplateExtGetWithHttpInfo(surveyId: string, ext: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/template.${ext}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdTemplateExtGet.');
        }
        // verify required parameter 'ext' is not null or undefined
        if (ext === null || ext === undefined) {
            throw new Error('Required parameter ext was null or undefined when calling surveysSurveyIdTemplateExtGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 特定问卷模板上传
     * 问卷模板下载 
     * @param file 特定分卷模板上传
     * @param surveyId 问卷id
     */
    public surveysSurveyIdTemplateUploadGetWithHttpInfo(file: any, surveyId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/template/upload`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling surveysSurveyIdTemplateUploadGet.');
        }
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdTemplateUploadGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (file !== undefined) {
            formParams.set('file', <any>file); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 更新问卷基本信息, 注意这里是PUT不是POST
     * 更新问卷基本信息 
     * @param surveyId 问卷id
     * @param payload json格式， 问卷基本信息设置
     */
    public surveysSurveyIdUpdatePutWithHttpInfo(surveyId: string, payload: models.SurveyDetail, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/${surveyId}/update`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'surveyId' is not null or undefined
        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling surveysSurveyIdUpdatePut.');
        }
        // verify required parameter 'payload' is not null or undefined
        if (payload === null || payload === undefined) {
            throw new Error('Required parameter payload was null or undefined when calling surveysSurveyIdUpdatePut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 共用问卷模板下载
     * 问卷模板下载 
     * @param ext 模板格式,默认xlsx, 比如/surveys/efx.xlsx
     */
    public surveysTemplateExtGetWithHttpInfo(ext: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/template.${ext}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ext' is not null or undefined
        if (ext === null || ext === undefined) {
            throw new Error('Required parameter ext was null or undefined when calling surveysTemplateExtGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 共用问卷模板上传
     * 问卷模板下载 
     * @param file 模板文件，multipart/form-data
     */
    public surveysTemplateUploadPostWithHttpInfo(file: any, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/surveys/template/upload`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling surveysTemplateUploadPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (file !== undefined) {
            formParams.set('file', <any>file); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}

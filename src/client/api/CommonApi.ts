/**
 * 问卷系统 API
 * 前后端交互协议, 遵循以下约定:   1. 所有api都属于无状态接口   2. 除了/user/login,/_*_/sms,/user/register,/user/updatePwd接口，其他接口都要登录之后才能操作   3. 登录成功之后，后端每次都把token和shopId(当前门店)置入header,回传服务端   4. 客户端请求参数分两种:       1. 以form方式提交，可以附带store、pageNumber、pageSize参数       2. 以json方式提交，务必附带store、pageNumber、pageSize属性，如果没有值，为null   5. 服务端返回统一的json， 格式如下:       {        meta:{         code: 状态码         link: 链接         limit: 每页多少条         total:  总共多少条         current: 当前页         method: 方法         parameters: {  客户端的请求参数          startDate:开始时间          endDate:结束时间          ........:xxxx(请求参数都会在meta里面)                    },         store: { 客户端专用，保存交互状态的对象                  }         }        data:{ // 保存的数据，可能是array, object          object          list<object>          jsonArray        }        error:{           code:xxxxx (子状态码)            message:xxxxx        }       }            6. 公共状态(meta->code)约定如下:              500:             服务端处理失败， 返回json中存在error, meta对象， 不一定存在data对象          200:             成功， 返回json中有meta， data对象， 不存在error对象          401:             认证失败，用户的token过期或者token错误， 客户端需要引导用户重新登录          403:             授权失败， 一般出现在用户访问没有权限的资源, 返回json中存在error, meta对象          400:             参数错误,  客户端提交的参数不正确, 返回json中存在error, meta对象                 7. error的子状态码， 开发人员可以自行约定              
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class CommonApi {
    protected basePath = 'http://survey.mytianhui.com/api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 验证码，返回的是验证码图片的base64
     * 通过的验证码接口 
     */
    public commonCaptchaBase64Get(extraHttpRequestParams?: any): Observable<string> {
        return this.commonCaptchaBase64GetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 验证码，返回的是stream， 客户端直接在图片src引用api url
     * 通过的验证码接口 
     */
    public commonCaptchaGet(extraHttpRequestParams?: any): Observable<{}> {
        return this.commonCaptchaGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 验证图形验证码的有效性
     * 
     * @param uuid 访问验证码生成的uuid
     * @param code 验证码
     */
    public commonCaptchaValidateGet(uuid: string, code: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.commonCaptchaValidateGetWithHttpInfo(uuid, code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 发送注册验证码， 注册验证码只能用在注册，后端放入cache/reids，设置timeout，做单限制/单ip发送次数?
     * 
     * @param mobile 手机号
     * @param rnd 4位随机数， 客户端生成
     * @param sign 签名, md5(phone+rnd+salt)， 其中salt&#x3D;thzs0708, 不符合签名的请求一律返回错误
     */
    public commonSmsPost(mobile: string, rnd: string, sign: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.commonSmsPostWithHttpInfo(mobile, rnd, sign, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 验证 手机验证码
     * 
     * @param mobile 手机号
     * @param code 4位随机数， 手机验证码
     */
    public commonSmsValidatePost(mobile: string, code: string, extraHttpRequestParams?: any): Observable<models.CommonResponse> {
        return this.commonSmsValidatePostWithHttpInfo(mobile, code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取区  
     * 
     * @param cityId 省份id
     */
    public regionCityIdCountyGet(cityId: string, extraHttpRequestParams?: any): Observable<models.RegionListResponse> {
        return this.regionCityIdCountyGetWithHttpInfo(cityId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取省份              
     * 
     */
    public regionProvinceGet(extraHttpRequestParams?: any): Observable<models.RegionListResponse> {
        return this.regionProvinceGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 获取城市  
     * 
     * @param provinceId 省份id
     */
    public regionProvinceIdCityGet(provinceId: string, extraHttpRequestParams?: any): Observable<models.RegionListResponse> {
        return this.regionProvinceIdCityGetWithHttpInfo(provinceId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 验证码，返回的是验证码图片的base64
     * 通过的验证码接口 
     */
    public commonCaptchaBase64GetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/common/captchaBase64`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 验证码，返回的是stream， 客户端直接在图片src引用api url
     * 通过的验证码接口 
     */
    public commonCaptchaGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/common/captcha`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 验证图形验证码的有效性
     * 
     * @param uuid 访问验证码生成的uuid
     * @param code 验证码
     */
    public commonCaptchaValidateGetWithHttpInfo(uuid: string, code: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/common/captcha/validate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling commonCaptchaValidateGet.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling commonCaptchaValidateGet.');
        }
        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 发送注册验证码， 注册验证码只能用在注册，后端放入cache/reids，设置timeout，做单限制/单ip发送次数?
     * 
     * @param mobile 手机号
     * @param rnd 4位随机数， 客户端生成
     * @param sign 签名, md5(phone+rnd+salt)， 其中salt&#x3D;thzs0708, 不符合签名的请求一律返回错误
     */
    public commonSmsPostWithHttpInfo(mobile: string, rnd: string, sign: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/common/sms`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'mobile' is not null or undefined
        if (mobile === null || mobile === undefined) {
            throw new Error('Required parameter mobile was null or undefined when calling commonSmsPost.');
        }
        // verify required parameter 'rnd' is not null or undefined
        if (rnd === null || rnd === undefined) {
            throw new Error('Required parameter rnd was null or undefined when calling commonSmsPost.');
        }
        // verify required parameter 'sign' is not null or undefined
        if (sign === null || sign === undefined) {
            throw new Error('Required parameter sign was null or undefined when calling commonSmsPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (mobile !== undefined) {
            formParams.set('mobile', <any>mobile); 
        }
        if (rnd !== undefined) {
            formParams.set('rnd', <any>rnd); 
        }
        if (sign !== undefined) {
            formParams.set('sign', <any>sign); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 验证 手机验证码
     * 
     * @param mobile 手机号
     * @param code 4位随机数， 手机验证码
     */
    public commonSmsValidatePostWithHttpInfo(mobile: string, code: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/common/sms/validate`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'mobile' is not null or undefined
        if (mobile === null || mobile === undefined) {
            throw new Error('Required parameter mobile was null or undefined when calling commonSmsValidatePost.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling commonSmsValidatePost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (mobile !== undefined) {
            formParams.set('mobile', <any>mobile); 
        }
        if (code !== undefined) {
            formParams.set('code', <any>code); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取区  
     * 
     * @param cityId 省份id
     */
    public regionCityIdCountyGetWithHttpInfo(cityId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/region/${cityId}/county`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'cityId' is not null or undefined
        if (cityId === null || cityId === undefined) {
            throw new Error('Required parameter cityId was null or undefined when calling regionCityIdCountyGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取省份              
     * 
     */
    public regionProvinceGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/region/province`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 获取城市  
     * 
     * @param provinceId 省份id
     */
    public regionProvinceIdCityGetWithHttpInfo(provinceId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/region/${provinceId}/city`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'provinceId' is not null or undefined
        if (provinceId === null || provinceId === undefined) {
            throw new Error('Required parameter provinceId was null or undefined when calling regionProvinceIdCityGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
